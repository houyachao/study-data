1、 Spring计数器实现
public ConfigurableApplicationContext run(String... args) {
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();

		// .......省略代码	

		stopWatch.stop();
}

public void start(String taskName) throws IllegalStateException {
		if (this.currentTaskName != null) {
			throw new IllegalStateException("Can't start StopWatch: it's already running");
		}
		// 获取当前执行的名字
		this.currentTaskName = taskName;
		// 取当前时间
		this.startTimeMillis = System.currentTimeMillis();
}

public void stop() throws IllegalStateException {
		if (this.currentTaskName == null) {
			throw new IllegalStateException("Can't stop StopWatch: it's not running");
		}
		// 执行的时间
		long lastTime = System.currentTimeMillis() - this.startTimeMillis;
		this.totalTimeMillis += lastTime;
		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime);
		if (this.keepTaskList) {
			// 这里维护一个task列表，用于获取所有的启动的任务。
			this.taskList.add(this.lastTaskInfo);
		}
		++this.taskCount;
		this.currentTaskName = null;
}

// 可以自己的实现
public static void main(String[] args) throws InterruptedException {
        StopWatch stopWatch = new StopWatch();
        stopWatch.start("123");
        Thread.sleep(2000);
        stopWatch.stop();
        stopWatch.start("456");
        Thread.sleep(1000);
        stopWatch.stop();
        System.out.println(stopWatch.getLastTaskInfo());

        SpringApplication.run(TestApplication.class, args);
    }



2、 启动加载器，是在springboot启动后加载类的。、
  // 方式一
@Component
@Order(1)
public class FirstApplicationRunner implements ApplicationRunner {
    @Override
    public void run(ApplicationArguments args) throws Exception {
        System.out.println("first FirstApplicationRunner........");
    }
}  
// 方式2
@Component
@Order(1)
public class FirstCommandLineRunner implements CommandLineRunner {
    @Override
    public void run(String... args) throws Exception {
        System.out.println("first commandLineRunner........");
    }
}
// 方式3
@Component
@Order(2)
public class SecondApplicationRunner implements ApplicationRunner {
    @Override
    public void run(ApplicationArguments args) throws Exception {
        System.out.println("second SecondApplicationRunner........");
    }
}
// 方式4
@Component
@Order(2)
public class SecondCommandLineRunner implements CommandLineRunner {
    @Override
    public void run(String... args) throws Exception {
        System.out.println("second commandLineRunner........");
    }
}

执行顺序： 1-》 2 -》 3 -》 4

源码分析
public ConfigurableApplicationContext run(String... args) {
	
	// 省略大量代码

	callRunners(context, applicationArguments);
}

private void callRunners(ApplicationContext context, ApplicationArguments args) {
	List<Object> runners = new ArrayList<>();
	// 获取ApplicationRunner 类型的 runner
	runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());
	// 获取CommandLineRunner 类型的 runner
	runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());
	AnnotationAwareOrderComparator.sort(runners);
	for (Object runner : new LinkedHashSet<>(runners)) {
		if (runner instanceof ApplicationRunner) {
			// 具体去执行实现 ApplicationRunner 的子类的实现
			callRunner((ApplicationRunner) runner, args);
		}
		if (runner instanceof CommandLineRunner) {
			// 具体去执行实现 CommandLineRunner 的子类的实现
			callRunner((CommandLineRunner) runner, args);
		}
	}
}

面试题：
1、怎么在Springboot 启动后执行程序？
	可以实现 CommandLineRunnable接口或者 ApplicationRunable接口。

