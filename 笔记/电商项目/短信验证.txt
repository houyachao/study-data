
今日任务
	
	> 发送邮件
	> 手机短信验证
	  中国网建
	  云片网
	  
	  
	  http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html
	  
	  
1.发送邮件
	
	①加入依赖
	<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
	</dependency>
	
	②单元测试	
		
	import java.util.Properties;

	import javax.mail.BodyPart;
	import javax.mail.Message;
	import javax.mail.Multipart;
	import javax.mail.Session;
	import javax.mail.Transport;
	import javax.mail.internet.InternetAddress;
	import javax.mail.internet.MimeBodyPart;
	import javax.mail.internet.MimeMessage;
	import javax.mail.internet.MimeMultipart;

	import org.junit.Test;

	public class EmailTest {

		private String host = "smtp.163.com"; // smtp服务器
		private String user = "xjbvsxjb"; // 用户名
		private String pwd = "3276202xjb"; // 密码
		private String from = ""; // 发件人地址
		private String to = ""; // 收件人地址

		public void setAddress(String from, String to) {
			this.from = from;
			this.to = to;
		}

		public void send(String txt) {
			Properties props = new Properties();
			// 设置发送邮件的邮件服务器的属性（这里使用网易的smtp服务器）
			props.put("mail.smtp.host", host);
			// 需要经过授权，也就是有户名和密码的校验，这样才能通过验证（一定要有这一条）
			props.put("mail.smtp.auth", "true");
			// 用刚刚设置好的props对象构建一个session
			Session session = Session.getDefaultInstance(props);
			// 有了这句便可以在发送邮件的过程中在console处显示过程信息，供调试使
			// 用（你可以在控制台（console)上看到发送邮件的过程）
			session.setDebug(true);
			// 用session为参数定义消息对象
			MimeMessage message = new MimeMessage(session);
			try {
				// 加载发件人地址
				message.setFrom(new InternetAddress(from));
				// 加载收件人地址
				message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
				// 加载标题
				message.setSubject("xxxx课堂测试");
				// 向multipart对象中添加邮件的各个部分内容，包括文本内容和附件
				Multipart multipart = new MimeMultipart();

				// 设置邮件的文本内容
				BodyPart contentPart = new MimeBodyPart();
				contentPart.setText(txt);
				multipart.addBodyPart(contentPart);

				// 添加附件
				// BodyPart messageBodyPart = new MimeBodyPart();
				// DataSource source = new FileDataSource(affix);
				// 添加附件的内容
				// messageBodyPart.setDataHandler(new DataHandler(source));
				// 添加附件的标题
				// 这里很重要，通过下面的Base64编码的转换可以保证你的中文附件标题名在发送时不会变成乱码
				// sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
				// messageBodyPart.setFileName("=?GBK?B?"+
				// enc.encode(affixName.getBytes()) + "?=");
				// multipart.addBodyPart(messageBodyPart);

				// 将multipart对象放到message中
				message.setContent(multipart);
				// 保存邮件
				message.saveChanges();
				// 发送邮件
				Transport transport = session.getTransport("smtp");
				// 连接服务器的邮箱
				transport.connect(host, user, pwd);
				// 把邮件发送出去
				transport.sendMessage(message, message.getAllRecipients());
				transport.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public static void main(String[] args) {

			EmailTest cn = new EmailTest();
			// 设置发件人地址、收件人地址和邮件标题
			cn.setAddress("xjbvsxjb@163.com", "wangnn@atguigu.com");
			cn.send("33333");
		}
	}
		
2. 中国网建  
 wh17600726039
884021


	网址：http://sms.webchinese.com.cn/
	
	①加入依赖
	
	<dependency>
		<groupId>commons-codec</groupId>
		<artifactId>commons-codec</artifactId>
		<version>1.4</version>
	</dependency>
	<dependency>
		<groupId>commons-httpclient</groupId>
		<artifactId>commons-httpclient</artifactId>
		<version>3.1</version>
	</dependency>
	<dependency>
		<groupId>commons-logging</groupId>
		<artifactId>commons-logging</artifactId>
		<version>1.1.1</version>
	</dependency>

	②代码：		
		
	import org.apache.commons.httpclient.Header;
	import org.apache.commons.httpclient.HttpClient;
	import org.apache.commons.httpclient.NameValuePair;
	import org.apache.commons.httpclient.methods.PostMethod;

	public class SendMsg_webchinese {

		public static void main(String[] args) throws Exception {

			HttpClient client = new HttpClient();
			PostMethod post = new PostMethod("http://gbk.api.smschinese.cn");
			post.addRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=gbk");// 在头文件中设置转码
			NameValuePair[] data = { 
					new NameValuePair("Uid", "shiliu"), 
					new NameValuePair("Key", "593e95da4d0ea553be10"),
					new NameValuePair("smsMob", "18622642186"), 
					new NameValuePair("smsText", "验证码：8888,猜呀猜") };
			post.setRequestBody(data);

			client.executeMethod(post);
			Header[] headers = post.getResponseHeaders();
			int statusCode = post.getStatusCode();
			System.out.println("statusCode:" + statusCode);
			for (Header h : headers) {
				System.out.println(h.toString());
			}
			String result = new String(post.getResponseBodyAsString().getBytes("gbk"));
			System.out.println(result); // 打印返回消息状态

			post.releaseConnection();

		}

	}

3. 云片网  bedddbf736eb46222be6c44cc8bbac60

	网址：https://www.yunpian.com/

	① 依赖

	<dependency>
		<groupId>com.yunpian.sdk</groupId>
		<artifactId>yunpian-java-sdk</artifactId>
		<version>1.2.6</version>
	</dependency>
	
	②代码：
	
		
	import java.util.Map;

	import com.yunpian.sdk.YunpianClient;
	import com.yunpian.sdk.model.Result;
	import com.yunpian.sdk.model.SmsSingleSend;

	public class YunPian_SendSMS {

		public static void testSendSms(String apikey, String mobile, String text) {
			//初始化client,apikey作为所有请求的默认值(可以为空)
			YunpianClient clnt = new YunpianClient(apikey).init();

			Map<String, String> param = clnt.newParam(2);
			param.put(YunpianClient.MOBILE, mobile);
			param.put(YunpianClient.TEXT, text);
			Result<SmsSingleSend> r = clnt.sms().single_send(param);
			//获取返回结果，返回码:r.getCode(),返回码描述:r.getMsg(),API结果:r.getData(),其他说明:r.getDetail(),调用异常:r.getThrowable()
			r.getData();
			//账户:clnt.user().* 签名:clnt.sign().* 模版:clnt.tpl().* 短信:clnt.sms().* 语音:clnt.voice().* 流量:clnt.flow().* 隐私通话:clnt.call().*

			//最后释放client
			clnt.close();
		}
		
		public static void main(String[] args) {
			YunPian_SendSMS.testSendSms("***APIKEY***","手机号","模版内容");
		}
	}