主键约束：保证实体完整性     PRIMARY KEY;
外键约束：保证引用完整性     FOREIGN KEY REFERENCES（引用名）  一般添加到表级约束。
检查约束：保证域完整性       CHECK（条件）    【mysql不支持】
默认值约束：保证域的完整性      DEFAULT '值'
自增列又称标识列： 保证实体完整性   AUTO_INCREMENT  这个列上的值是自动增加的，一个表中只能有一个标识列，使用一定要求和key使用，可以通过set auto_increment_increment=3,设置步长
唯一约束：UNIQUE
NOT NULL 非空约束
							主键和唯一的对比：
									主键和唯一都保证了唯一性，主键不可以为空，唯一可以为空但是只能有一个，
		       							一个表中最多有一个主键，可以有多个唯一，都可以组合使用。		
                                                         外键：
								①要求在从表设置外键关系
								②从表的外键列的类型和主表关联列的类型要求一致或兼容，名称无要求
								③主表的关联列必须是一个key（一般是主键或唯一）
								④插入数据时，先插入主表，再插入从表，删除数据时，先删除从表，再删除主表
								FOREIGN KEY （名称） REFERENCES 主表名（字段名）；
进入数据库： use 库名；
查看表的基本结构： DESCRIBE/DESC 表的名称；
查看表的详细结构： SHOW CREATE　TABLE 表名\G; 
查看库的所有表：show tables;

常见数据类型：
数值型：①整型 Tinyint(1字节)、Smallint(2字节)、Mediumint(3字节)、int和integer(4字节)、Bigint(8字节)
	特点：①如果不设置是无符号还是有符号的，默认是有符号的，如果想设置无符号，需要添加unsigned关键字
	      ②如果插入的数值超过了整性的范围，会报out of range异常，并且插入临界值
	      ③如果不设置长度，会有默认的长度，长度代表了显示的宽度，如果长度不够会用0在左边填充，但必须搭配zerofull使用。
       ②小数：浮点型：float(M,D)（4字节）、double(M,D)（8字节） 。  定点型：dec(M,D)（M+2字节)、decimal(M,D)（M+2字节)
	 特点： ①M:整数部位+小数部位
	          D:小数部位
		  如果超过范围，则为临界值
	        ②M和D都可以省略，如果是decimal，则默认M为10，D为0.。。如果是float 和double，则会根据插入的数值的精度来决定精度。
		③定点型的精度较高，如果要求插入的数值的精度较高如货币运算则考虑使用
字符型：①较短的文本：char、varchar  ②较长的文本：text、blob（较长的二进制数据）
日期型：①date只有日期(4字节) 
        ②datetime既有时间也有日期，不受地区影响(8字节) 
        ③timestamp时间戳，受地区影响(4字节) 
        ④time时间（3字节）
        ⑤year年(1字节)

DDL语言：  数据定义语言
库的创建：create database 【if not exists】 库名；  如果库存在就不再创建，如果不存在就再继续创建。
库的修改：alter database 旧库名 to 新库名；
库的删除：DROP database if EXISTS 库名；       如果库存在就删除。 

创建表： create table 表名(
			列名 列的类型【（长度） 约束】，
			列名 列的类型【（长度） 约束】，
				。。。。
			列名 列的类型【（长度） 约束】  )

表的修改： alter table 表名 add添加| drop删除| modify修改数据类型| change修改列名 conlumn 列名 【列类型 约束】；

修改表名： ALTER TABLE 旧表名 RENAME [column] TO 新表名
修改字段名： ALTER TABLE 表名 CHANGE [column] 旧名称 新名称 新类型； 
修改字段数据类型： ALTER TABLE 表名 MODIFY [column] 字段名称 类型；             
添加字段：ALTER TABLE 表名 ADD [column] 字段名称 类型
删除字段：ALTER TABLE 表名 DROP [column] 字段名称
添加主键约束：ALTER TABLE 表名 ADD CONSTRAINT 约束名（约束的类型_表名_列 PK_user_userqq） PRIMARY KEY （字段名称列）；
添加外键约束：ALTER TABLE 表名 ADD CONSTRAINT 约束名（约束的类型_表名_列 FK_SCORES_GAMES） FOREIGN KEY （字段名） REFERENCES 其它表名（列名）；
添加检查约束：ALTER TABLE 表名 ADD CONSTRAINT 约束名（约束的类型_表名_列 CK_user_userqq） CHECK（条件）;
添加默认值约束：ALTER TABLE 表名 ALTER  需要修改的列 SET DEFAULT ‘值’；
添加自动增长语法：ALTER TABLE 表名 MODIFY COLUMN 需要修改的列 类型 是否为空 AUTO_INCREMENT 是否是主键；
修改表时添加约束：
		1.添加列级约束
		  alter table 表名 modify column 字段名 字段类型 新约束；
		2.添加表级约束
		  alter table 表名 add 【constraint 约束名】 约束类型(字段名) 外键的引用；
删除无关联数据表： DROP TABLE 【IF EXISTS】 表名；
删除有关联数据表： ①先解除关联关系：ALTER TABLE 约束名 DROP FOREIGN KEY 字段名 ② 删除表 

复制表：①仅仅复制表的结构 create table 新表名 like 被复制的表名；
	②复制表的结构+数据 create table 新表名 select * from 被复制的表名；
	  如果想复制部分信息，只需要将select后面的条件改变就行了。 	


数据操作语言：DML语言

为所以列都插入值：INSERT 【INTO】 表名 VALUES（v1,v2,v3,.....）；特点一：列值必须同数，列值同序；
                 例： INSERT INTO user VALUES ('20100','周婷婷','男','1987-01-02','10974678378');
我特定列插入值：  INSERT 【INTO】 表名 （COL1，COL2，COL3，，，） VALUES（V1，V2，V3，，，，）   特点：制定顺序，列值对应
                 例： INSERT INTO user （USER_QQ，USER_NAME）VALUES（‘20130’，‘叮当’）; 
一次性插入多条数据：INSERT 【INTO】 表名 （COL1，COL2，COL3，，，） VALUES（V1，V2，V3，，，，），（V1，V2，V3，，，，），（V1，V2，V3，，，，）

修改全部数据：UPDATE 表名 SET {列名=值}
修改特定数据：UPDATE 表名 SET {列名=值} where 条件；

重点：
使用DELETE删除数据：DELETE 【FROM】 表名 【where 条件】【limit条目数】；
使用 TRUNCATE TABLE 删除数据：TRUNCATE TABLE 表名；  清空数据表                        delete和TRUNCATE区别：面试题

假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始。
	                   如果TRUNCATE删除数据，再插入数据，自增长列的值从1开始。
delete可以添加筛选添加，truncate不可以添加筛选条件。
TRUNCATE删除没有返回值，而delete删除有返回值。
TRUNCATE删除不可以回滚，而delete删除可以回滚。
TRUNCATE删除效率会高一点。


数据查询语言：DQL语言

DISTINCT关键字  消除结果集中的重复行；
LIMIT关键字   指定结果集中数据的显示范围；后面有一个或者两个参数  例： SELECT * FROM user LIMIT 2,3;
列名 BETWEEN 值1 AND 值2；   相当于 值1<=a<=值2
列名 not BETWEEN 值1 AND 值2； 相当于 不在值1和值2范围内的数字

通配符：like '_' 一个字符、 % 任意长度、 [] 指定范围内、 [^] 不在括号中
              
 	IN(,,,) 判断某字段的值是否属于in列表中的某一项






查询空值的运算符：   用 IS NULL;
查询不为空值的运算符：  IS not NULL;

单列排序
ORDER BY 列名（ASC升|DESC降）


聚合函数： sum()总和；avg()平均值；min()最小值；max()最大值；count()统计结果集合中非空全部记录行的数量；
		Select count(列名或者*) from user;  


内连接：①相连接的两张表地位平等
        ②如果一张表中在另一张表中不存在对应数据，则不做链接。
   显示内连接：在   FROM 表名1 [INNER]JOIN 表名2 ON 表名1.COL=表名2.COL
        
	select 查询列表
	from 表1 别名 【连接类型】            【连接类型】：如果是内连接填： inner ，如果是左外：left 【outer】，如果是右外：right 【outer】
	join 表2 别名 					   如果是全外连接： full 【outer】， 交叉连接：cross
	on 连接条件
	【where 筛选条件】
	【group by 分组条件】
	【having 筛选条件】
	【order by 排序条件】

外链接： ①做链接的两个表地位不平等，其中有一张是基础表
         ②基础表中的每条数据必须出现，即使另一张表中没有数据与之匹配，也要用NULL补齐；
         ③左外连接时左表是基础表，右外连接时右表是基础表
         ④语句中先出现的表为“左表”，后出现的表为“右表”；
      Form 表名1 LEFT| RIGHT [outer] JOIN 表名2 ON 表名1.COL=表名2.COL


子查询：
	按子查询出现的位置：
	select后面：
		  仅仅支持标量子查询
	from后面：
		  支持表子查询
	where或having后面：              ☆
		  标量子查询 （单行）    √
		  列子查询  （多行）     √
		  
		  行子查询 
	    exists后面（相关子查询）
	          表子查询
按结果集的行级数不同：
	标量子查询（结果集只有一行一列）
	列子查询（结果集只有一行多列）
	行子查询（结果集有一行多列）
	表子查询（结果集一般为多行多列） 
特点：
①子查询放在小括号内
②子查询一般放在条件右侧
③标量子查询，一般搭配着单行操作符使用
     >  <  >=   <=  <>
  列子查询，一般搭配着多行操作符使用
  IN、ANY/SOME、ALL


使用IN关键字的子查询：将子查询的结果返回给父查询使用
使用EXISTS关键字的子查询：子查询返回的是TURN 或者FALSE  如果是真，这父查询执行


使用联合查询：select usert_name from usert     应用场景：要查询的结果来自于多个表，且多个表没有直接的链接关系，但查询的信息一致
              UNION[ALL]
 	      select usert_age from usert
              ①可以把多条语句所产生的结果集纵向链接为一体、
              ②有ALL关键字可以显示全部数据（即重复的也显示出来）
              ③列的数量与类型都要兼容


时间和月份：

返回当前日期：curdate();  
             curdate()+0;可以将当前日期转换为数值型
	     使用：Select curdate(),curdate()+0;
         
返回当前时间：curtime();
	      curtime()+0;可以将当前时间转换为数值型

返回当前日期和时间：NOW（）； SYSDATE(); 

获取月份：MONTH(时间)；MONTHNAME(时间)；
获取星期：DAYNAME(时间)；DAYOFWEEK(时间); WEEKDAY(时间); WEEK(时间); WEEKOFYEAR(时间)
获取天数：dayofyear(时间)；dayofmonth(时间)
获取年份，季度，小时，分钟，秒数：year(时间)；quarter(时间)； hour(时间)； minute(时间)； second(时间)；

str_to_date 将字符通过指定的格式转换成日期
select str_to_date(‘1998-02-01’,'%Y-%c-%d');     %Y  四位的年份  	%d   日(01,02)
                                                   %y  2位的年份        %H   小时（24进制）
					           %m  月份（01,02,03）  %h   小时（12进制）
						   %c  月份（1,2,3,）    %i   分钟（00,01.。59）
                                                                         %s   秒（00,01）
date_format 将日期转换成字符

数学函数：
绝对值函数：abs(X)
符号函数：sign(x)
随机数：rand();rand(X);  如果带参数这产生的是一个固定的数值
获取整数的函数：ceil(x);  返回>=该参数的最小整数     floor(X)  向下取整，返回<=该参数的最大整数
四舍五入函数：round(X);   round(X,Y);   两个参数 Y保留小数的位数，如果Y为负数为向前移动
              TRUNCATE（X,Y）;   精确保留  Y保留小数的位数后面的全部砍掉
求余函数：mod（X,Y）;  X为被除数Y为除数   x-x/y*y;
幂函数：POW（X,Y）;


字符串函数：

计算字符数：     char_length(S);
计算字符串字节长度： length(S)
合并字符串函数： concat(s1,s2)
指定链接方式        concat(X,s1,s2)  例concat('#',s1,s2)
替换字符串：     insert(s1,X,len,s2)
                 replace(s,s1,s2)
截取字符串的函数： left（S,N）  right(S,N)
重复生成字符串字符： repeat(s,n)
填充字符串的函数： Lpad(s1,填充长度,s2)  从左边填充
                  rpad(s1,填充长度，s2)  从右边填充
删除空格函数： Ltrim(s) 删除左边空格
              rtrim(s)  删除右边空格
              trim(s)   删除两边空格
返回指定位置字符串函数： elt(N,s1,s2)
获取子字符串：    mid(s,n,长度)

返回字符串的位置： fieLd(s,s1,s2);


系统函数：

获取MYSQL版本号的函数： version（）
查看当前用户的链接数：  connection_ID()
查看当前所在数据库 函数： database（） ； schema();
获取用户名的函数：  user（）


事务：一个或一组SQL语句组成一个执行单元，这个执行单元要么全执行，要么都不执行。
事务的ACID属性：①原子性：原子性是指事务是一个不可分割的工作单位，事务要么都执行，要么都不执行。
		②一致性：事务必须使数据库从一个一致性状态转变到另一个一致性的状态。
		③隔离性：事务的隔离性是指一个事务的执行不能受其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他
		          事务是隔离的，并发执行的各个事务直接不能互相干扰。
		④持久性：持久性是指一个事务一旦被提交了，它对数据库中的数据的改变就是持久性的，接下来的其他操作和数据库故障不
			   应该对其有任何影响。
步骤1：开启事务
set autocommit=0;
start transaction;可选的
步骤2：编写事务中的SQL语句（select, insert, update, delete）
语句1；
语句2；
。。。。
步骤3：结束事务
commit;提交事务
rollback;回滚事务                           delete支持回滚，truncate不支持回滚。
savepoint 节点名； 设置保存点，和rollback一块使用

查看当前的隔离级别：select @@tx_isolation;
设置当前mysql链接的隔离级别： set transaction isolation level read committed;
设置数据库系统的全局的隔离级别： set global transaction isolation level read committed;
事务的隔离级别：
                	脏读         不可重复读       幻读
read uncommitted         √            √              √
read committed           ×             √              √
repeatable read           ×            ×              √
serializable              ×            ×               ×
mysql中默认 第三个隔离级别 repeatable read
oracle中默认第二个隔离级别 read committed 


视图：一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了SQL逻辑，不保存查询结果
应用场景：①多个地方用到同样的查询结果 ②该查询结果使用的SQL语句比较复杂
  
创建视图：create view 视图名
	  as
	  查询语句；
例：查询各部门的平均工资
	①创建视图查看每个部门的平均工资
	  create view myv1
	  as
	  select avg(salary) ag,department_id
	  from employees
	  group by department_id;
	②使用
	select * from myv2;

修改视图
方式一：create or replace view 视图名       #如果视图存在则修改，如果不存在则创建
        as
	查询语句；
方式二：alter view 视图名
	as
 	查询语句；
删除视图： drop view 视图名1，视图名2.。。。。；
查看视图：desc 视图名；

具备以下特点的视图不允许更新：
	①包含以下关键字的SQL语句：分组函数，distinct, group by, having, union, union all
	②常量视图
	③select包含子查询
	④join
	⑤from一个不能更新的视图
	⑥where字句的子查询引用了from字句中的表


变量
一、系统变量（全局变量和会话变量）
 说明:变量由系统提供，不是用户定义，属于服务器层面。
 注意：如果是全局级别，则需要加global，如果是会话级别，则需要加session，如果不写，则默认为Session；
使用的语法：
  1.查看	所有的系统变量
    show global|[session] variables;
  2.查看满足条件的部分系统变量
    show global|[session] variables like '%char%';
  3.查看指定的某个系统变量的值
     select @@global|[session] .系统变量名；
  4.为某个系统变量赋值
    方式一：set global | [session] 系统变量名=值；
    方式二：set @@global | [session] .系统变量名=值； 

二、用户自定义变量
  作用域：针对当前会话（链接）有效，同于会话变量的作用域；

  赋值的操作符：  =或：=
  ①声明并初始化
    set @用户变量名=值；或
    set @用户变量名：=值；或
    select @用户变量名：=值；
  ②赋值（更新用户变量的值）
   方式一：  通过set或select

    set @用户变量名=值；或
    set @用户变量名：=值；或
    select @用户变量名：=值；
  
   方式二：   通过select   INTO
    
    select 字段  INTO   @变量名 
     from 表；

局部变量：
   作用域只在begin  end中有效。
   应用在begin end 中的第一句话。
   ①声明：
    declare 变量名 类型；
    declare 变量名 类型 default 值；
   ②赋值
	方式一：  通过set或select
	     set 局部变量名=值；或
             set 局部变量名：=值；或
             select 局部变量名：=值；
  	方式二：   通过select  INTO
	  
         select 字段  INTO   @变量名 
         from 表；
   
    ③使用
	select 变量名；



存储过程：一组预先编译好的SQL语句的集合，理解成批处理。
    好处：①提高代码可重用性。
          ②简化操作
   	   ③减少了与数据库的链接次数和编译次数，提高了效率


创建语法：
     create procedure 存储过程名（参数列表）
     begin
       存储方法体（一组合法的SQL语句）
     end
注意：
 ①参数列表包括三部分 
   参数模式  参数名  参数类型
   举例： in  name  varchar(20);

   参数模式：
	in : 该参数作为输入，也就是该参数需要调用方传入值。
        out：该参数作为输出，也就是该参数可以作为返回值。
        inout: 该参数既可以作为输入输出，也就是该参数即需要传入输入值，也可以返回值。
 ②如果存储过程体中仅仅只有一句话，begin  end  可以省略。
   存储过程体中的每条SQL语句的结尾要求必须加分号；


    存储过程体中的结尾可以使用delimiter重新设置。
    语法：  delimiter 结束标记；      如果结束标记符后面加分号，会认为是两个结束标记符，
  
 调用语法：
   call  存储过程名（实参列表）；  

案例： delimiter $
       create procedure myp1()
       begin 
           insert  into admin(user,pass) value ('hou',22);
       end $
      
      call myp1()$
	
案例：delimiter $
      create procedure myp2(in userroot varchar(20),in password varchar(20))
	begin
	 declare result int default 0;   声明初始化变量
	 select count(*) into result     赋值
	 from admin
	 where admin.userroot=userroot
         and admin.password=password;
	 select if(result>0,'成功'，'失败');使用
	end $
   call myp2('侯亚超'，'2222')$  调用
案例：create procedure myp3(into a int,into b int)
	begin 
	 set a=a*2;
	 set b=b*2;
	end $
       set @m=10;   调用
       set @n=20;
       call myp3(@m,@n) $
       select @m,@n
案例：创建存储过程传入女神名，返回：女神AND男神
      create procedure myp4(in beauname varchar(20),out str varchar(50))
 	begin
	 select concat(beauname,'and',ifnull(boyName,'null')) into str
         from boys bo
	 right join beauty b on b.boyfriend_id=bo.id
	 where b.name=beauname; 
	end $
	call myp4('柳岩',@str)$
   	select @str $
     
删除存储过程：DROP procedure 存储过程名；
查看存储过程的信息： show create procedure 存储过程名；

存储过程和函数的区别：存储过程可以有0个返回，也可以有多个返回，适合做批量插入，批量更新。而函数有且仅有一个返回，适合做处理数据和返回一个结果。


一、创建函数
   create function 函数名(参数列表) returns 返回类型
    begin
           函数体
    end 
注意：①参数列表  包含两部分： 参数名 参数类型
      ②函数体：肯定会有return语句，如果没有肯定会报错。如果return语句没有放在函数体的最后也不会报错，但不建议使用。
        return 值；
      ③函数体中仅有一句话，则可以省略 begin end
      ④使用delimiter语句结束标记

二、调用函数
    select 函数名（参数列表）

案例：返回公司的无参有返回的员工个数
	先声明标记   delimiter $
         create function myf1() returns int
          begin
	   declare c int default 0;    定义局部变量,用于接收返回值
	   select count(*) into c
           from empolys;
	   return c;
	 end $
       select myf1() $;


案例：有参数有返回值  根据员工名返回工资
       create function my2(empName varchar(20)) returns double
       begin
	    set @sal=0;     定义用户变量，用于接收返回值
	    select salary into @sal
            from empolys
	    where last_name=empName;

            return @sal;
      end $
    select myf2('侯亚超') $

三、查看函数
	show create function 函数名；
四、删除函数
	drop function 函数名；



一、流程控制结构：
    一、分之结构

     ①if函数：实现简单的双分支，可以应用在任何地方
      if（表达式1，表达式2，表达式3） 
      如果表达式1成立，则if函数返回表达式2，否则返回表达式3；
    
      
   二、case结构
      情况1：类似于java中的switch语句，一般用于实现等值判断

	case 变量|表达式|字段                                     注意：
	when 要判断的值 then 返回的值或语句1；                    如果返回的是值后面不加分号，   如果是语句得加分号；
	when 要判断的值 then 返回的值或语句2；                    如果返回的是值case结束时end，   如果是语句结束是end case
        。。。。
	else 要返回的值n或语句n；
	end case；


	情况2：类似于java中的多重if语句，一般用于实现区间判断：
	
	case 
	when 要判断的条件1 then 返回的值或语句1；
	when 要判断的条件2 then 返回的值或语句2；
 	。。。。。
	else 要返回的值n或语句n;
	end case；

	特点：
	①可以作为表达式，嵌套在其他语句中使用，可以放在任何地方，begin end 中 或 begin end 的外面，
	  可以作为独立的语句去使用，只放在begin end 中。
	②如果when中的值或条件成立，则执行对应的then后面的语句，并且结束case，如果都不满足，则执行else中的语句或值。
	③else可以省略，如果是else省略了，并且所有when条件都不满足，则返回NULL。

	案例：创建存储过程，根据传来的成绩，来显示等级，比如成绩：90-100 显示为A，80-90 显示为B....
	
	delimiter $
	create procedure test_case(in score int)
	begin
	case 
	when score>=90 and score<=100 then select 'A';
	when score>=80 then select 'B’;
	when score>=70 then select 'C';
	else select 'D';
	end case;
	end $
	call test_case(90)$

   三、if结构：实现多重分支。   应用场合：应用于begin end中

	if 条件1 then 语句1；
	elseif 条件2 then 语句2；
	。。。
	else 语句n;
	end if；
	
	案例：根据传来的成绩，来显示等级，比如成绩：90-100 返回为A，80-90 返回B....
	
	create function test_if(score int) returns int
	begin
	if score>=90 and score<=100 then return 'A';
	elseif score>=80 then return 'B';
	...
	else return 'D';
	end if;
	end $
	select test_if(89)$


   四、循环结构
	分类：while、loop、repeat
	循环控制：
	iterate 类似于continue；继续，结束本次循环，继续下一次循环。
	leave 类似于break；跳出，结束当前所在的循环。
	
	①while
	语法： 
	  【标签：】while 循环条件 do             如果用到循环控制，得加标签
 			循环体；
	   end while【标签】；

	②loop
	语法：
	  【标签：】loop
		循环体；
	   end loop【标签】；
	可以用来模拟简单的死循环。

	③repeat
	语法：
	  【标签：】repeat
		循环体；
	   until 结束循环的条件；
	   end repeat【标签】；


    案例：批量插入，根据次数插入到admin表中多条记录
	create procedure pro_while(in insertCount int)
	begin 
	declare i int default 1;
	while i<=insertCount do
	insert into admin(username,password) value ('Rose'+i,'666');
	set i=i+1;
	end while;
	end $
	call pro_while(100)$
  	
    案例：批量插入，根据次数插入到admin表中多条记录,如果次数>20则停止
	create procedure pro_while1(in insertCount int)
	begin
	declare i int default 1;
	a:while i<=insertCount do
	insert into admin(username,passwore) value('xiaohua'+i,'000');
	if i>20 then leave a;
	end if;
	set i=i+1;
	end while a;
	end $
	call pro_while1(21)$

   案例：向该表插入指定个数的，随机的字符串
	create procedure pro_while1(in insertCount int)
	begin
	declare i int default 1;  定义一个循环变量i,表示插入次数
	declare str varchar(20) default 'abcdefghijklmnopqrstuvwxyz';
	declare startIndex int default 1; 代表起始索引
	declare len int default 1; 代表截取的字符的长度
	a:while i<=insertCount do
	set len=floor(rand()*(20-startIndex+1)+1);   产生一个随机整数，代表截取长度
	set startIndex=floor(rand()*26+1);  产生一个随机整数，代表起始索引1-26
	insert into admin(content) value(substr(str,startIndex,len));
	if i>20 then leave a;
	end if;
	set i=i+1;
	end while a;
	end $







1.5版本的新特性，就是你想定义一个方法，但是不知道以后要用的时候想传几个参数进去，
比如求和，你想定义一个传几个int数据都能给你算出和的方法，可以在方法的参数列表中这样写(参数类型... 数组名)，
然后在方法内部直接用操作数组的方式操作。在你调用的时候可以随便传几个参数进去，JVM都能将这些数据封装成一个数组，
然后按照你方法内的操作进行操作。

java中   ：  方法区属于站栈里面的永久区里面的一部分。


String s1="11";
int i=Integer.valueOf(s1);   转换
